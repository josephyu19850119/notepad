企业员工的加班类似于军队在战争中的伤亡
如果我是一支军队的指挥官，要我向部下保证在战斗中零伤亡，这是不可能的。伤亡不可避免，可如果我置部下生死于度外，默认死伤为常态，就是严重的渎职了，甚至认为不负伤、不牺牲，就是不勇猛，就更是丧心病狂了。
同理，如果我负责管理一家公司或一支团队，要我向员工保证这里完全不加班，恐怕也勉为其难，在快速发展、竞争激烈的行业中更是如此，谁也不能保证不会出紧急或意外的情况。可如果默认加班为常态，不加班就意味着工作量不饱和，甚至不加班的员工就是混日子，加班的才是奋斗者，拼搏者，这就是病态的管理文化。
军队战斗中的不保证和无伤亡和视伤亡为正常，二者绝不相同，同理，不保证不加班和视加班为正常也绝不相同。
真要是出现了伤亡／加班的情况怎么办？比如不久前森林大火中殉职的消防员，有关部门想必已经慰问了家属、发放了抚恤金。而对于加班的员工，企业、团队的负责人有多少向员工的家属表达过歉意？你说没有加班费，但有报销晚饭和打车？这就好比对殉职消防员的家属说，我们没有抚恤金，但为他们免费举行了遗体告别和骨灰安葬呀。
其次，有关部门会针对这次事故，认真反思之前工作中的缺陷并予以纠正，对消防员做相关的训练，全力避免悲剧再次发生。而不是坐视下次同样情况发生时，再用人命去填。
而如果我作为企业的管理者，看到下属在正点下班时间后还在忙碌，我绝不会一声不响的走开。我会走过去询问这是怎么回事？遇到了什么困难？出现了什么意外？是不是制定了不切实际的目标？朝令夕改的目标？我们的工作流程是不是有什么低效的环节？
作为管理者，需要不断反思目标和流程的制定中的缺陷，对可能出现的意外，有所预测和预案，全力避免规定时间内目标无法完成的现象。对如果确是员工自己的问题，我该怎样帮助他克服？如果克服不了，当初在招聘环节，为什么我们没有发现？当然他也真有可能是个勤奋好学的员工，想超标准或提前完成任务，我在表达敬佩之余，也会与他商榷是不是可以拿回家做？某位员工下班总是不走，也许会对其他员工产生微妙的影响。

华为有“奋斗者协议”、京东这两天也在讲“拼搏”。不瞒各位，我自认为就是个勤奋刻苦的人，我也喜欢那些勤奋刻苦的人，甚至可以刻薄地说，对于追求安逸的年轻人，我还真有几分轻视。但接下来的话您可更要听好了：奋斗也好、拼搏也罢，具有很多种形式，工作加班是奋斗，下班之后去健身房挥汗如雨也是奋斗，去上课培训充电读书也是奋斗，工作时间之外开发第二职业挣外快也是奋斗，回家照顾孩子老人病人更是艰苦的奋斗，不是只为你家玩命加班打工才叫奋斗。要照你们这标准，我一个Android工程师，正点下班回家后学学iOS都不叫奋斗了。我之所以对“奋斗者协议”这个东西心生反感，就是如果我不签，就甘心承认自己是非奋斗者了。华为的“奋斗者协议”前面缺了个定语，应该叫做“为华为奋斗者协议”。签，为你家奋斗，不签，打份工而已，人各有志，与你不同并不意味着我就自甘平庸了。

对于病态的管理观念，我予之无情的挞伐，而对管理者特别是高管无意间的盲区，我也提出善意的提醒：
比方说我要是CEO吧，公司的产品开发进度要过问，活动的费用审批要签字，上次见那技术大拿争取要挖过来，考虑今年给那几个关键员工涨多少工资，行业的动态要有了解，技术的发展更要关注，说不定每天还要规定自己在办公室冥想10分钟，晚上还有个应酬，你瞧我这一天工作16个小时还乐此不疲，你们这么年轻为什么一到六点就想回家肥宅呢？之所以乐此不疲，是因为CEO的工作一天下来，把左脑、右脑的各条脑回路全都用上了，一个区域在兴奋的时候，对其它区域则是休息，所以这样16小时下来就不见得身心俱疲，甚至还有可能酣畅淋漓。可越到基层的岗位，工作内容就越单一，不论是画图、做账、流水线上拧螺丝、还是在客服中心接电话，八个小时下来，一直在用大脑的某个区域，甚至就是某根手指头。我做过每天在浩如烟海的日志里分析问题的工作（我称之为“考古”），也负责过语料标注的团队，那种工作的枯燥程度，我认为每天超过6个小时都是不人道的。
所以，因为工作内容的差异，高层管理者以自己的感观，可能会低估同样的工作时间对基层工作者身心的的消耗。

而我们程序员自己有没有责任呢？当然有。
程序员加班现象的源头可以追溯到大学校园的考前突击文化，或者说，考前突击是最早的加班。只不过学校考试只是期末前的那几周，那几门课。可到了职场上，新任务、新需求可是周周来，甚至天天来。于是学校里短则几天，长则几周的没日没夜的考前突击，演变成职场上长年累月的996了。
在学校里我十分惊讶于周围同学的考前突击能力，这方面我真是自叹不如他们聪明，我当时的室友，在复变函数考试前一周，还不知道-1开根号等于i呢，最后也能考80多分。但我真的需要这份“聪明”吗？我挂过十几门课，挂科不是件开心的事，但更令我不安的是，考试虽然过了，但完全是浑水摸鱼过去的，这门课的内容其实完全不懂，过了几年甚至忘了学过这门课。所以当年我好几次干脆放这门课挂掉，然后通过自学，扎扎实实，融会贯通掌握它，然后轻而易举的再通过考试，这就是我的行为方式。学校里的考前突击，到了如今的程序员界，有了个漂亮的名字：“快速学习能力”。真是个漂亮的名字，我都被它忽悠了好几年。我所理解的“快速学习能力”，是尽早理解一个领域的本质思想和基本概念。掌握了这些关键点，遇到此领域的相关问题，大都可以有章法的解决。而绝不是遇到问题，首先想到搜一段现成的代码，改吧改吧先用起来，或是跟着别人的攻略，亦步亦趋的照猫画虎。我绝不是说这样做有什么不好，我也经常这么做，可这些都是周边技巧，可靠的程序代码的核心不是建立在这样的工作方式上的。我之前公司的一个早期核心开发人员，搭建了最初的服务架构，以及组里用的GitLab，按说应该水平还可以吧？可有一次在讨论问题时，我发现他竟然分不清楚调用一个函数和传递这个函数的指针这两个概念。他还向我抱怨了好几次我为啥要开那么多Git分支？会占用太多磁盘空间的。我想，他要是先去看看Git的基本原理，就不会问出这么低级的问题了。我这位前同事，不就和我那位不知道-1开根号等于i的室友“异曲同工”吗？我好像从来没见过他比我早下班，我并不好评估他加班的效果如何，总之后来差不多同一时间，整个团队作鸟兽散。对“快速学习能力”的认知偏差，还会导致对自身能力的认知的偏差，导致设定不切实际的目标。就好比囫囵吞枣的翻了一遍“时间简史”，就觉得自己能干物理学博士的活了。可真干起来才发现似乎并不是之前想象的那样，不要说996，就算你7*24你都搞不出来。可饼已经给人画出来了，还每天还正点下班岂不是显得太没诚意了，没有功劳也得有苦劳吧，那就加加班意思意思呗。
那该如何避免上述情况？首先，写简历或面试不要吹牛，有一份实力说一份话。面试蒙混过关固然是面试官的失败，却也是你狼狈的开始。你所有吹过的牛，都是给你接下来这份工作挖的坑，都需要通过疲于奔命的“快速学习能力“来圆上。因为这个加班的程序员，还有资格抱怨没有加班费？其实试用期就该让你滚蛋的，你本身就不值那么多钱。其次，在完全具备承担这份工作技术积累的情况下，根据我的经验，不但不需要加班，还经常能提前完成呢。而这些空闲时间，应该充分利用起来学习，学习那些不一定和当前工作直接相关，但值得学习的技术。而且我认为，如果希望在业界有更好的发展，回家之后，也应该有1至2个小时的专业学习时间。但注意，这不是加班，没有加班时的时间和进度压力，可以已更平稳的心态，更扎实、更系统的学习。我将这样的学习称之为“流汗”，而疲于奔命的加班，称之为“流血”，你是想多流汗呢还是想多流血呢？
报销贴发票是例行公事，请假发邮件是例行公事，上下班打卡是例行公事，甚至周报周会都可以例行公事，但代码审查(code review)绝不是例行公事。代码审查远不是提交前的检查和批准过程，更是相互学习和交流的机会。从别人的代码那里学习可取之处，听听别人的意见或建议，提出自己观点，不论是否最终是否同意或采纳，保持谦卑和开放的心态。如果你觉得太忙而没有时间互相review code，好，那就预留出双倍时间互相挖坑和甩锅吧。
